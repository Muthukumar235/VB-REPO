              
                            Driver Sript for CreateAssignment

'**************************************************CCCIS QAAG***********************************
'Script Name: CreateAssignment
'Author: 	
'Created Date: 
'Addons: 
'Description: 	 
'Manual test case:  
'AUT Name and Version:     
'QTP Version of this script:                 QTP 11.0	
'Shared Object Repository Files:  
'Datatable: 
'Initial Conditions: 
'Parameters:
'Dependancies:
'Is there a ReadMeFile?:                     Yes/No
'***********************************************************************************************
'Modification Log:
'Name			                 Date			           Description
' 
'
'***********************************************************************************************
	'***Declaring for force validation
	Option Explicit
	
	Environment.Value("Iteration_StartTime") = CRAFTLite_Initialize()

	'***Calling the Test case
	CreateNewAssignment()
	
	CRAFTLite_ErrHandler Err
	'***Extract the report
	CRAFTLite_WrapUp()  

'================================================================================================
'Subroutine Name    :	CreateNewAssignment
'================================================================================================
' This subroutine is used to create a new assignment using webservices
'
' 	Parameters  : 	None
'
'	Returns    : 	Nothing
'
'================================================================================================
Public Sub CreateNewAssignment()

	'***Declaring variables
	Dim strWebServiceURL
	Dim strContentType
	Dim strSOAPAction
	Dim strClaimID
	Dim strAssignmentType
	Dim oWebServiceDict

	'***Getting data from the data table
	strWebServiceURL=CRAFTLite_GetData("WSDL_URL")
	strContentType=CRAFTLite_GetData("WSDL_ContentType")
	strSOAPAction=CRAFTLite_GetData("WSDL_SOAP_Action")
	strClaimID=CRAFTLite_GetData("ClaimID")
	strAssignmentType=CRAFTLite_GetData("AssignmentType")

	'***To create a new assignment
	Call AssignmentNew(strWebServiceURL,strContentType,strSOAPAction,strClaimID,strAssignmentType)

	'***Clearing the object
	Set oWebServiceDict=Nothing

End Sub
'*********************************************************************************************************
' End of the Script
'*********************************************************************************************************


 			

       				AssignmentCreation.qfl


'*********************************************************************************************************
' Script:  AssignmentCreation.qfl
'
' This qfl file can be used to assignment functionalities
' 
' Author: Cognizant
'	
'
' Purpose: To handle assignment creation
'	 
' 
' Modified:
'	
'**********************************************************************************************************
'***Declaring for force validation
Option Explicit

'==========================================================================================================
' Subroutine: AssignmentNew
'==========================================================================================================
' This subroutine is used to create a new assignment
'
' Parameters: 
'		oDictCollection - Dictionary object which contains wsdl URL, Service, Port, 
 		Content Type, SOAP Action and XML Data   
'							
' Returns:   	
' =========================================================================================================
Public Sub AssignmentNew(strWebServiceURL,strContentType,strSOAPAction,strClaimID,strAssignmentType)

	'***Declaring Variables
	Dim oXMLFile
	Dim strResponse
	Dim c_ErrorCode
	Dim c_AssignmentMessage

' ===================================================
	'***Declaring Constants
	c_ErrorCode="000"
	c_AssignmentMessage="Assignment Accepted"

' ===================================================
	'***To load the xml to send the request
	Set oXMLFile=loadXML("RF_Data_Geico")

	'***To editt the xml file with claim id
	Call EditXML(oXMLFile,"tran:UniqueTransactionID","GE#"&strClaimID&"#12192006120343")
	Call EditXML(oXMLFile,"tran:LossReferenceID",strClaimID)
	Call EditXML(oXMLFile,"v1:LossReferenceId",strClaimID)
	'Call EditXML(oXMLFile,"v1:AssignmentActionCode",strAssignmentType)
	
	'***To send the request
	 strResponse=SendRequest(strWebServiceURL,strContentType,strSOAPAction, oXMLFile)

	 '***To Validate the xml with expected value
	 Call VerifyXML(strResponse,"assign:Code",c_ErrorCode)
	 Call VerifyXML(strResponse,"assign:Description",c_AssignmentMessage)

	 '***Clearing the objects
	 Set oXMLFile=Nothing

End Sub

'**********************************************************************************************************
'End of the script
'**********************************************************************************************************



				Webservice_common.qfl


'***********************************************************************************************************
' Script:  Webservice_common.qfl
'
' This qfl file can be used for  send a request to wbservice
' 
' Author: Cognizant
'	
' Purpose: Handling Sendrequest functionality 
'	 
' Modified:
'	
'************************************************************************************************************
Option Explicit '***Forcing Variable declarations

'======================================================================
' Function: SendRequest
'======================================================================
' Function for Sending the request to the webservice
'
' Parameters: 
'		WebServiceURL - URL of the webservice
'		ContentType - Format of the xml
'		SOAPAction - Action to be performed in the SOAP
'		strRequest - To send the xml file as request
'    
' Returns:
'		WinHTTP.ResponseText  - Response XML message 
'======================================================================
Public Function SendRequest(WebServiceURL,ContentType,SOAPAction, strRequest)

	Dim WinHTTP
	'***Creating WinHTTP object to proceed the web service messaging
	Set WinHTTP=CreateObject("WinHttp.WinHttpRequest.5.1")
	WinHTTP.Open "Post", WebServiceURL, False
	WinHTTP.SetRequestHeader "Content-Type", ContentType
	WinHTTP.SetRequestHeader "SOAPAction", SOAPAction

	'***Sending the xml file as request
	WinHTTP.Send strRequest.xml
	SendRequest=WinHTTP.ResponseText

	'***Deleting the WinHTTP object created
	Set WinHTTP=Nothing

End Function

'======================================================================
' Function: LoadXML
'======================================================================
' Function for loading the xml from QC to QTP test
'
' Parameters: 
'		FileName - Name of the XML to be used
' Returns:
'		LoadXML - Returns the loaded xml
'======================================================================
Public Function LoadXML(FileName)

	'***Declaring variable
   Dim xmlDoc

   	'***To load the XML file by creating the 'XMLDOM' object
   Set xmlDoc = CreateObject("Microsoft.XMLDOM")
	xmlDoc.load PathFinder.Locate(FileName&".xml")
	Set LoadXML=xmlDoc

End Function

'======================================================================
' Subroutine: EditXML
'======================================================================
' Subroutine for editing the XML tag values
'
' Parameters: 
'		XMLFile - Xml file to be used for editing
'		TagName - On which tag element the value should be edited
'		strTagValue - Value to be updated in the given xml file
' Returns:
'		Nothing
'======================================================================
Public Sub EditXML(XMLFile,TagName,strTagValue)

   '***To edit the tagvalue
   XMLFile.getElementsByTagName(TagName).item(0).text=strTagValue

End Sub

'======================================================================
' Subroutine: VerifyXML
'======================================================================
' Subroutine for validate the XML tag values with expected values
'
' Parameters: 
'		strResponse - Xml response from request sent
'		TagName -  Xml tag name is used to verfiry in xml file
'		strValueToBeVerifed - Expected value to be verified.
' Returns:
'		Nothing
'======================================================================
Public Sub VerifyXML(strResponse, TagName, strValueToBeVerifed)
	'***Declaring variables
	Dim XMLFile
	Dim bReturn
	Dim strMessage
	Dim strActualValue

	bReturn=False

	Set XMLFile=CreateObject("Microsoft.XMLDOM")
	XMLFile.LoadXML(strResponse)
	strActualValue= XMLFile.getElementsByTagName(TagName).item(0).text

	'***Comparing expected value is matching with actual value
	If strValueToBeVerifed=strActualValue Then		
		bReturn=True
		strMessage=strValueToBeVerifed &" - Found in the Responsed  XML  - " & strActualValue
	Else
		strMessage=strValueToBeVerifed &" - Not sFound in the Responsed  XML - " & strActualValue

	End If

    CRAFTLite_ReportEvent Environment.Value("ReportedEventSheet"),"VerifyXML.ReportLogger",strMessage, bReturn

End Sub

'********************************************************************************************************************
' End of the Script
'*********************************************************************************************************************
